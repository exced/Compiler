// NB. Ce programme ne sert qu'a illustrer les concepts de mC
// et ne calcule rien de particulier !
// nom de type (doit commencer par une majuscule)
typedef int Entier ; 

// variable globale
Entier x;

// nom de type donne a un struct
typedef struct {
  int x;
  int y;
} Point ;

// variable globale
Point p;


// fonction illustrant la manipulation de pointeurs.
int foo(int n, int m){
    // declaration de variable locale sans initialisation
    int xxx;
    xxx = 100;
    // declaration avec initialisation
    int a = n + m;
    // declaration d'un pointeur et allocation de la zone pointee
    int *m = (int *)malloc(1);
    a = *m +666;
    // declaration d'un pointeur sur pointeur
    int ** k = (int **)malloc(1) ;
    *k = m;
    // allocation
    *k = (int *)malloc(1) ;
    ** k = 12;
    int b = **k + 9999;
    // cast
    m = (int *)malloc(1);
    return m;
}

// fonction illustrant les expressions arithmetiques
int bar(int a, int b){
   struct { int x; int y; } *pt;
   *pt.x = 3;
   pt->y = 3;
   int u = 301;
   int v = 401;
   int result;
   result = foo(33*a - b > (-55*u/22%11/v));
   return result;
} 

// assembleur inline en dehors d'une fonction
asm {
   CALL (LB) _main   ; appel au point d'entree du programme
   HALT              ; arret de la machine
   }

// Assembleur inline dans une fonction. 
// malloc en TAM : 
// params : Taille : entier (pre : >0)
// retour : entier (post : une adresse dans le tas)
int * malloc(int taille){
  int adr;
  // appel a l'allocation TAM
  asm {
    LOAD %taille    ; acces au parametre taille
    SUBR Malloc     ; allocation
    STORE %adr      ; resultat dans adr
  }
  return adr;
}

// fonction renvoyant un pointeur utilisant la fonction precedente
int * pointeur(int x){
  // declaration et allocation
  int *p = malloc(x);
  // appel fonction foo
  *p = foo(999, 1);
  // retourner le pointeur
  return p;
  }


// Assembleur inline dans une fonction
// log : afficher un message et une valeur
void log(char *message, int valeur){
  int x = 12;
  asm {
    LOAD %message        ; acces au premier parametre
    SUBR Sout
    LOAD %valeur         ; acces au deuxieme parametre
    LOAD %x              ; acces a la variable x
    SUBR IAdd
    SUBR IOUT
    SUBR LN 
    }
}

// point d'entree du programme.
int main(){
    int a = 3;
    char c = 'a';
    int y = 999;
    // appel fonction
    char c = 'a';
    int y = 999;
    int res = foo2 (y, (int) c);
    // appel fonction bar
    log("Hello, world ! ", bar(98,99));
    // instruction conditionnelle
    if (y ==0){
       log("alors",y);}
    else {
       log("sinon", y);
    }
    return 0;
}
